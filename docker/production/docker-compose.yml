volumes:
  # Database
  postgres_data: {}
  postgres_data_backups: {}

  # Shared volumnes for django_nginx
  django_static_files: {}

  # HTTP certs
  certbot_certs: {}
  certbot_libs: {}

services:
  django:
    image: ${DOCKER_IMAGE}
    container_name: django_prod
    working_dir: /app
    depends_on:
      - postgres
    # bind the hostname of the service
    command: "gunicorn \
              --bind django:8000 \
              django_src.wsgi"
    volumes:
      # These volumnes are created so nginx
      # can access the files
      - type: volume
        source: django_static_files
        target: /app/staticfiles

    env_file:
      # This files must be created when deploying
      - ../../envs/production/django
      - ../../envs/production/postgres
  postgres:
    image: postgres:14.4
    container_name: postgres_prod
    volumes:
      - postgres_data:/var/lib/postgresql/data:Z
      - postgres_data_backups:/backups:z
    env_file:
      # For local testing uncomment these
      - ../../envs/production/postgres
  nginx:
    image: nginx:1.25.1
    container_name: nginx_prod
    depends_on:
      - django
    volumes_from:
      # Nginx only needs to read data from django container, use ro flag
      - django:ro
    volumes:
      # Copy nginx configuration to container
      - type: bind
        source: ../../nginx/nginx.conf
        target: /etc/nginx/nginx.conf

      - type: volume
        source: certbot_certs
        target: /etc/letsencrypt
        read_only: true

    ports:
      - "443:443"

  certbot:
    image: certbot/certbot
    tty: true
    container_name: certbot_prod
    volumes:
      - type: volume
        source: certbot_certs
        target: /etc/letsencrypt
      - type: volume
        source: certbot_libs
        target: /var/lib/letsencrypt
    # entrypoint: /bin/sh
    ports:
      - "80:80"
    # Prevent this container from start when doing up -d command
    profiles:
      - certbot
