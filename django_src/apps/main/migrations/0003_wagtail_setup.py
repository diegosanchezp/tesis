# Generated by Django 4.2.7 on 2023-12-09 18:35

from django.db import migrations

from django.contrib.auth import get_user_model
from django.conf import settings

from django.apps.registry import Apps
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from wagtail.models import BaseViewRestriction

app_label = "register"

def initial_data(apps: Apps, schema_editor: BaseDatabaseSchemaEditor):
    User = apps.get_model(settings.AUTH_USER_MODEL)
    Permission = apps.get_model("auth", model_name="Permission")
    Group = apps.get_model("auth", model_name="Group")
    ContentType = apps.get_model("contenttypes.ContentType")
    GroupPagePermission = apps.get_model("wagtailcore", model_name="GroupPagePermission")

    Page = apps.get_model("wagtailcore", model_name="Page")

    HomePage = apps.get_model("main", model_name="HomePage")
    BlogIndex = apps.get_model("main", model_name="BlogIndex")

    admin = User.objects.get(username=settings.ADMIN_USERNAME)

    root_page = Page.objects.get(slug='root')

    # Add home page as a child of root, use low level tree beard api, because
    # add_child() method is not available in migrations
    page_content_type, created = ContentType.objects.get_or_create(
        model="homepage", app_label="main"
    )

    # Create a bare bones home page
    home_page = HomePage.objects.create(
        # Wagtail Page data
        owner=admin,
        title="Home",
        slug="root_home",
        url_path="/",
        content_type=page_content_type,
        locale=root_page.locale,
        # HomePage specific data
        header_text="La Asociación de Egresados y Amigos de la UCV, te invitan a registrarte en la nueva plataforma de mentorías.",
        header_cta="Registrarme",
        # Tree beard low level data
        path="00010002",
        depth=2,
        numchild=1,
    )

    page_content_type, created = ContentType.objects.get_or_create(
        model="blogindex", app_label="main"
    )
    # Add BlogIndex as a child of the home page
    blog_index = BlogIndex.objects.create(
        # Wagtail Page data
        owner=admin,
        title="Blog",
        slug="blogs",
        url_path="/blogs/",
        content_type=page_content_type,
        locale=root_page.locale,
        # Tree beard low level data
        path="000100020001",
        depth=3,
        numchild=0,
    )


    # Only logged in users can see the blogposts
    blog_index.view_restrictions.create(
        restriction_type=BaseViewRestriction.LOGIN,
    )

    # Create a mentor group
    mentor_group = Group.objects.create(name="Mentores")

    # Mentor group can access the wagtail admin interface
    wagtail_access_admin = Permission.objects.get(codename="access_admin")

    mentor_group.permissions.add(wagtail_access_admin)

    # Setup page permissions for the mentor groups
    add_page_permission = Permission.objects.get(codename="add_page")
    group_permission = GroupPagePermission.objects.create(
        group=mentor_group, page=blog_index, permission_type="add",
        permission=add_page_permission,
    )

def remove_initial_data(apps: Apps, schema_editor: BaseDatabaseSchemaEditor):
    pass

class Migration(migrations.Migration):

    dependencies = [
        ('customauth', '0002_setup_admin'),
        ('main', '0002_blogpost'),
        ('wagtailadmin', '0003_admin_managed'),
    ]

    operations = [
        migrations.RunPython(initial_data, remove_initial_data)
    ]
