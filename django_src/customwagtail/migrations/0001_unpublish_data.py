# Generated by Django 5.0.6 on 2024-06-12 00:56

from django.db import migrations
from django.apps.registry import Apps
from django.db.backends.base.schema import BaseDatabaseSchemaEditor

from django_src.settings.wagtail_pages import (
    jobs_index_path,
    blogs_index_path,
    EMPRESAS_GROUP_NAME,
    MENTORS_GROUP_NAME,
)

from django_src.customwagtail.viewsets import UNPUBLISH_PAGE_CODE


def get_groups(Group):
    # business_group created by 0002_jobssetup
    business_group = Group.objects.get(name=EMPRESAS_GROUP_NAME)
    # mentors_group created by 0003_wagtail_setup
    mentors_group = Group.objects.get(name=MENTORS_GROUP_NAME)

    return {
        "business_group": business_group,
        "mentors_group": mentors_group,
    }


def get_pages(BlogIndex, JobOfferIndex):

    blogs_index = BlogIndex.objects.get(path=blogs_index_path)
    jobs_offer_index = JobOfferIndex.objects.get(path=jobs_index_path)

    return {
        "blogs_index": blogs_index,
        "jobs_offer_index": jobs_offer_index,
    }


def get_permissions(Permission, page_contentype):

    publish_permission = Permission.objects.get(
        content_type=page_contentype, codename="publish_page"
    )
    return {
        "publish_permission": publish_permission,
    }


def create_unpublish_permission(apps: Apps, schema_editor: BaseDatabaseSchemaEditor):
    Permission = apps.get_model("auth", model_name="Permission")
    Group = apps.get_model("auth", model_name="Group")
    GroupPagePermission = apps.get_model(
        "wagtailcore", model_name="GroupPagePermission"
    )
    JobOfferIndex = apps.get_model("business", "JobOfferIndex")
    BlogIndex = apps.get_model("main", "BlogIndex")
    ContentType = apps.get_model("contenttypes.ContentType")
    Page = apps.get_model("wagtailcore", model_name="Page")

    page_contentype = ContentType.objects.get_for_model(Page)

    groups = get_groups(Group)
    business_group = groups["business_group"]
    mentors_group = groups["mentors_group"]

    pages = get_pages(BlogIndex=BlogIndex, JobOfferIndex=JobOfferIndex)
    blogs_index = pages["blogs_index"]
    jobs_offer_index = pages["jobs_offer_index"]

    # Get the publish permission
    permissions = get_permissions(
        Permission=Permission, page_contentype=page_contentype
    )
    publish_permission = permissions["publish_permission"]

    # The publish permission is enabled for business and mentors group, so they
    # can delete the page that they've created
    GroupPagePermission.objects.create(
        permission=publish_permission,
        page=jobs_offer_index,
        group=business_group,
    )
    GroupPagePermission.objects.create(
        permission=publish_permission,
        page=blogs_index,
        group=mentors_group,
    )

    # Create the unpublish permission
    unpublish_permission = Permission.objects.create(
        content_type=page_contentype,
        codename=UNPUBLISH_PAGE_CODE,
        name="Can unpublish page",
    )

    # Add the unpublish permission to the business and mentors groups
    GroupPagePermission.objects.create(
        group=business_group,
        page=jobs_offer_index,
        permission=unpublish_permission,
    )

    GroupPagePermission.objects.create(
        group=mentors_group,
        page=blogs_index,
        permission=unpublish_permission,
    )


def delete_unpublish_permission(apps: Apps, schema_editor: BaseDatabaseSchemaEditor):

    Permission = apps.get_model("auth", model_name="Permission")
    Group = apps.get_model("auth", model_name="Group")
    JobOfferIndex = apps.get_model("business", "JobOfferIndex")
    BlogIndex = apps.get_model("main", "BlogIndex")
    ContentType = apps.get_model("contenttypes.ContentType")
    Page = apps.get_model("wagtailcore", model_name="Page")
    page_contentype = ContentType.objects.get_for_model(Page)

    unpublish_permission = Permission.objects.get(codename=UNPUBLISH_PAGE_CODE)

    # Get the publish permission
    permissions = get_permissions(
        Permission=Permission, page_contentype=page_contentype
    )
    publish_permission = permissions["publish_permission"]

    pages = get_pages(BlogIndex=BlogIndex, JobOfferIndex=JobOfferIndex)
    blogs_index = pages["blogs_index"]
    jobs_offer_index = pages["jobs_offer_index"]

    groups = get_groups(Group)
    business_group = groups["business_group"]
    mentors_group = groups["mentors_group"]

    # This delete should delete the records that were created on the GroupPagePermission table for
    # business and mentors groups, because of the on_delete=models.CASCADE
    unpublish_permission.delete()

    GroupPagePermission = apps.get_model(
        "wagtailcore", model_name="GroupPagePermission"
    )

    # Remove the publish permission from the groups
    GroupPagePermission.objects.get(
        permission=publish_permission,
        page=jobs_offer_index,
        group=business_group,
    ).delete()

    GroupPagePermission.objects.get(
        permission=publish_permission,
        page=blogs_index,
        group=mentors_group,
    ).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("main", "0003_wagtail_setup"),
        ("business", "0002_jobssetup"),
    ]

    operations = [
        migrations.RunPython(create_unpublish_permission, delete_unpublish_permission)
    ]
